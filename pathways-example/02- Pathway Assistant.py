# Copyright 2024 Google, LLC. This software is provided as-is,
# without warranty or representation for any use or purpose. Your
# use of it is subject to your agreement with Google.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#    http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from common import encrypted_id, feedback_id, record_feedback, create_chat_session, writing_assistant, create_table, PATHWAY_BUCKET_NAME
from google.cloud import bigquery as bq
from google.cloud import storage

from streamlit_pdf_viewer import pdf_viewer
import streamlit as st

from datetime import datetime

# init a single storage client
storage_client = storage.Client()

################################# GCS / BQ Storage configurations ##############################

BQ_PATHWAY_CONVERSATIONS_TABLE_ID = 'gen-sch.gensch_evaluations.pathways_conversation_evaluations'

pathways_table_schema=[
    bq.SchemaField("pathway", "STRING", "Required", description="Pathway discussed"),
    bq.SchemaField("topics", "STRING", "Required", description="Topics discussed"),
    bq.SchemaField("score", "INTEGER", "Required", description="Conversation quality score"),
    bq.SchemaField("conversation", "RECORD", mode="REPEATED", fields=(
        bq.SchemaField("role", "STRING"),
        bq.SchemaField("content", "STRING")
    ), description="Conversation"),
    bq.SchemaField("risky", "BOOLEAN", description="True if Gemini says something with risk for patient"),
    bq.SchemaField("feedback", "STRING", description="User's feedback"),
    bq.SchemaField("recorded_time", "TIMESTAMP", "Required", description="Date and time the feedback has been recorded"),
    bq.SchemaField("user_id", "STRING", "Required", description="Id of the user who has made the feedback"),
    bq.SchemaField("parent_id", "STRING", "Required", description="Id of the parent conversation"),
    bq.SchemaField("id", "STRING", "Required", description="Id of the feedback"),
    bq.SchemaField("model", "STRING", "Required", description="Gemini model used")
]

###########################################################################################

@st.cache_resource()
def load_pdf(pathway_name: str):
    """
    Load the pdf document corresponding to the pathway name
    :param pathway_name: name of the pathway
    :return: pdf content as bytes
    """
    bucket = storage_client.bucket(PATHWAY_BUCKET_NAME)
    blob = bucket.blob(pathway_name + ".pdf")
    content = blob.download_as_string()
    return content

###########################################################################################
# APPLICATION USER INTERFACE AND BACKBONE

st.title("Pathways Q&A evaluations v2.0")
st.subheader("Seattle Children Hospital")

logos_colums = st.columns(20)
logos_colums[0].image('./resources/sch-logo.gif', width=30)
logos_colums[1].image('./resources/gcp-logo.png', width=35)

st.error("""
This application is for internal testing only. Please, ignore any output
generated by this application for answering patient-related medical questions.
""")

st.subheader("Pathways")

all_pathways = list(st.session_state['metadata'].keys())[:-2]

if 'current_pathway' not in st.session_state:
    selected_pathway = None
else:
    selected_pathway = st.session_state['current_pathway']

if not selected_pathway:
    index = None
    st.warning("No diagnosis made for this patient. Choose a pathway to start or visit the diagnosis phase")
else:
    selected_pathway = st.session_state['current_pathway']
    index = all_pathways.index(selected_pathway)

# pathway select box
selected_pathway = st.selectbox(
    "Selected Pathway", list(st.session_state['metadata'].keys())[:-2]
)
st.session_state['current_pathway'] = selected_pathway

if selected_pathway:

    # chat element for diagnosis
    key_pathway = "pathway"
    writing_assistant(key_pathway, "pathway", selected_pathway)

    # feedback diagnosis
    with st.form(key="feedback_pathways_conversations", clear_on_submit=True):
        st.markdown("**Feedback**")
        topics = st.text_input(label="Topics discussed")
        incremental = st.checkbox("Incremental feedback", value=True)
        score = st.slider(
            label="Conversation Score (0 [waste of time] to 5 [very informative])",
            min_value=0, max_value=5, value=2, step=1
        )
        risky = st.checkbox("At least one possible risk for patient")
        feedback = st.text_area(label="Feedback [optional]", height=100)
        feedback_button = st.form_submit_button(label="Submit Feedback")

    # record the feedback in BigQuery
    if feedback_button:

        # keep track of the full conversation (in case on incremental feedback)
        if st.session_state['incremental_index'] == 0:
            st.session_state['parent_id'] = 0

        # if incremental, store only the incremental conversation
        if incremental:
            conversation = st.session_state[f'{key_pathway}_text_chat_history'][st.session_state['incremental_index']:]
            st.session_state['incremental_index'] = len(st.session_state[f'{key_pathway}_text_chat_history'])
        else:
            conversation = st.session_state[f'{key_pathway}_text_chat_history']
            st.session_state['parent_id'] = -1

        # create the current feedback id
        current_id = feedback_id(encrypted_id()+st.session_state['current_pathway']+datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

        # feedback record dict
        feedback = {
            "pathway": st.session_state['current_pathway'],
            "topics": topics,
            "score": score,
            "conversation": conversation,
            "risky": risky,
            "feedback": feedback,
            "recorded_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "user_id": encrypted_id(),
            "id": current_id,
            "parent_id": st.session_state['parent_id'],
            "model": "gemini-1.5-pro-001",
        }

        # update the parend_id to the current_id
        st.session_state['parent_id'] = current_id

        # create the diagnosis table if needed
        #create_pathway_conversations_table()
        create_table(BQ_PATHWAY_CONVERSATIONS_TABLE_ID, pathways_table_schema)

        # record the feedback
        record_feedback(feedback, BQ_PATHWAY_CONVERSATIONS_TABLE_ID)

    # reset conversation button
    reset_chat_button = st.button(
        "Reset conversation", key=f"{key_pathway}_reset",
        disabled=not f'{key_pathway}_text_chat_history' in st.session_state.keys()
    )
    if reset_chat_button and f'{key_pathway}_text_chat_history' in st.session_state.keys():
        del st.session_state[f'{key_pathway}_text_chat_history']
        st.rerun()


# display the PDF report for reference
with st.expander("Pathway Document"):
    if selected_pathway:
        if 'pdf_name' not in st.session_state or st.session_state['pdf_name'] != selected_pathway:
            st.session_state['pdf_name'] = selected_pathway
            st.session_state['pdf'] = load_pdf(selected_pathway)
        if 'pdf' in st.session_state:
            pdf_content = st.session_state['pdf']
            pdf_viewer(pdf_content, width=700, height=800, pages_vertical_spacing=5)
