# Copyright 2024 Google, LLC. This software is provided as-is,
# without warranty or representation for any use or purpose. Your
# use of it is subject to your agreement with Google.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#    http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from common import encrypted_id, feedback_id, record_feedback, create_chat_session, writing_assistant, create_table
from google.cloud import bigquery as bq

from datetime import datetime
import streamlit as st

################################# GCS / BQ Storage configurations ##############################

BQ_DIAGNOSIS_TABLE_ID = 'gen-sch.gensch_evaluations.pathways_diagnosis_evaluations'

diagnosis_table_schema = [
    bq.SchemaField("preferred_diagnosis", "STRING", "Required", description="Preferred diagnosis"),
    bq.SchemaField("chosen_diagnosis", "STRING", "Required", description="Chosen diagnosis from Gemini proposals"),
    bq.SchemaField("score", "INTEGER", "Required", description="Conversation quality score"),
    bq.SchemaField("conversation", "RECORD", mode="REPEATED", fields=(
        bq.SchemaField("role", "STRING"),
        bq.SchemaField("content", "STRING")
    ), description="Conversation"),
    bq.SchemaField("in_short_list", "BOOLEAN", description="True if the preferred diagnosis in the short list proposed by Gemini"),
    bq.SchemaField("differential_diagnosis_missing", "BOOLEAN", description="True if differential diagnosis is missing from Gemini's short list"),
    bq.SchemaField("feedback", "STRING", description="User's feedback"),
    bq.SchemaField("recorded_time", "TIMESTAMP", "Required", description="Date and time the feedback has been recorded"),
    bq.SchemaField("user_id", "STRING", "Required", description="Id of the user who has made the feedback"),
    bq.SchemaField("id", "STRING", "Required", description="Id of the feedback"),
    bq.SchemaField("model", "STRING", "Required", description="Gemini model used")
]

###########################################################################################

# APPLICATION USER INTERFACE AND BACKBONE

st.title("Pathways Q&A evaluations v2.0")
st.subheader("Seattle Children Hospital")

logos_colums = st.columns(20)
logos_colums[0].image('./resources/sch-logo.gif', width=30)
logos_colums[1].image('./resources/gcp-logo.png', width=35)

st.error("""
This application is for internal testing only. Please, ignore any output 
generated by this application for answering patient-related medical questions. 
""")

st.subheader("Pathway Choice Assistant")

st.markdown("""
Interact with Gemini to discuss patient's characteristics, conditions and symptoms in order to 
make a decision about the pathway to be used.

- Chat with Gemini until you can make a decision about the pathway.
- Send feedback about your chat using the provided interface.
- Reset the chat anytime by clicking the "Reset conversation" button.
"""
)

st.info("It is recommended to reset conversation between each patient.")

st.warning("""
Making the decision about the pathway to be followed engages your responsability.
When following the selected pathway, if the patient's condition does not improve, 
never forget about differential diagnosis and go back to the diagnosis phase if
you consider it necessary.
""")

# chat element for diagnosis
key_diagnosis = "diagnosis"
writing_assistant(key_diagnosis, "diagnosis")

# selecting pathway after chatting with Gemini
st.session_state['current_pathway'] = st.selectbox(
    "Selected Pathway", list(st.session_state['metadata'].keys())[:-2], index=None
)

# feedback diagnosis
with st.form(key="feedback_diagnosis", clear_on_submit=True):
    st.markdown("**Feedback**")
    preferred_diagnosis = st.text_input(label="Preferred pathway")
    score = st.slider(
        label="Pathway Selection Score (0 [very uncorrect] to 5 [fully correct])", 
        min_value=0, max_value=5, value=2, step=1
    )
    diag_feedback_cols = st.columns(2)
    with diag_feedback_cols[0]:
        short_list = st.checkbox("Preferred pathway in the short list?")
    with diag_feedback_cols[1]:
        missing_dif_diags = st.checkbox("At least one missing differential pathway?")
    feedback = st.text_area(label="Feedback [optional]", height=100)
    feedback_button = st.form_submit_button(label="Submit Feedback")

# record the feedback in BigQuery
if feedback_button:

    # feedback record dict
    feedback = {
        "preferred_diagnosis": preferred_diagnosis,
        "chosen_diagnosis": st.session_state['current_pathway'],
        "score": score,
        "conversation": st.session_state[f'{key_diagnosis}_text_chat_history'],
        "in_short_list": short_list,
        "differential_diagnosis_missing": missing_dif_diags,
        "feedback": feedback,
        "recorded_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "user_id": encrypted_id(),
        "id": feedback_id(preferred_diagnosis+st.session_state['current_pathway']+datetime.now().strftime("%Y-%m-%d %H:%M:%S")),
        "model": "gemini-1.5-pro-001",
    }

    # create the diagnosis table if needed
    create_table(BQ_DIAGNOSIS_TABLE_ID, diagnosis_table_schema)

    # record the feedback
    record_feedback(feedback, BQ_DIAGNOSIS_TABLE_ID)

# reset conversation button
reset_chat_button = st.button(
    "Reset conversation", key=f"{key_diagnosis}_reset",
    disabled=not f'{key_diagnosis}_text_chat_history' in st.session_state.keys()
)
if reset_chat_button and f'{key_diagnosis}_text_chat_history' in st.session_state.keys():
    del st.session_state[f'{key_diagnosis}_text_chat_history']
    st.session_state['current_pathway'] = None
    st.rerun()
